// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuadLogic.Data.Context;

#nullable disable

namespace QuadLogic.Data.Migrations
{
    [DbContext(typeof(QuadLogicDbContext))]
    [Migration("20250215212232_AddMaintenanceRecords")]
    partial class AddMaintenanceRecords
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuadLogic.Core.Models.DroneBase", b =>
                {
                    b.Property<string>("DroneId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AltitudeMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BatteryLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CurrentPayloadWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InternalTemperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PayloadCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SolarPowerEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("SpeedKmh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("DroneId");

                    b.ToTable("DroneBase");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("QuadLogic.Core.Models.FlightPath", b =>
                {
                    b.Property<string>("PathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DroneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("EconomyScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EndHubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EstimatedEndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MaintenanceFlag")
                        .HasColumnType("bit");

                    b.Property<decimal>("PayloadWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StartHubId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PathId");

                    b.HasIndex("DroneId");

                    b.HasIndex("EndHubId");

                    b.HasIndex("StartHubId");

                    b.ToTable("FlightPaths");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.Hub", b =>
                {
                    b.Property<string>("HubId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BatterySwapCapacity")
                        .HasColumnType("int");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("MaintenanceCapability")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetworkRange")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SecurityLevel")
                        .HasColumnType("int");

                    b.Property<decimal>("SolarPowerStatus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HubId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.MaintenanceRecord", b =>
                {
                    b.Property<string>("RecordId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DroneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartsReplaced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresFollowUp")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicianId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordId");

                    b.HasIndex("DroneId");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.Drone", b =>
                {
                    b.HasBaseType("QuadLogic.Core.Models.DroneBase");

                    b.ToTable("Drones");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.HeavyHexacopter", b =>
                {
                    b.HasBaseType("QuadLogic.Core.Models.DroneBase");

                    b.Property<int>("ActiveBatteryCount")
                        .HasColumnType("int");

                    b.Property<decimal>("FrameStressLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("OmnidirectionalCameraStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresPersonnelApproval")
                        .HasColumnType("bit");

                    b.ToTable("HeavyHexacopters", (string)null);
                });

            modelBuilder.Entity("QuadLogic.Core.Models.RapidQuadcopter", b =>
                {
                    b.HasBaseType("QuadLogic.Core.Models.DroneBase");

                    b.Property<decimal>("AerodynamicEfficiency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ContraRotatingPropellers")
                        .HasColumnType("bit");

                    b.Property<bool>("EmergencySpeedBoost")
                        .HasColumnType("bit");

                    b.Property<bool>("FixedWingMode")
                        .HasColumnType("bit");

                    b.Property<decimal>("SecurityAltitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("SingleMissionBatteryMode")
                        .HasColumnType("bit");

                    b.Property<string>("SpeedProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RapidQuadcopters", (string)null);
                });

            modelBuilder.Entity("QuadLogic.Core.Models.StandardQuadcopter", b =>
                {
                    b.HasBaseType("QuadLogic.Core.Models.DroneBase");

                    b.ToTable("StandardQuadcopters", (string)null);
                });

            modelBuilder.Entity("QuadLogic.Core.Models.FlightPath", b =>
                {
                    b.HasOne("QuadLogic.Core.Models.DroneBase", "Drone")
                        .WithMany()
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuadLogic.Core.Models.Hub", "EndHub")
                        .WithMany()
                        .HasForeignKey("EndHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuadLogic.Core.Models.Hub", "StartHub")
                        .WithMany()
                        .HasForeignKey("StartHubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drone");

                    b.Navigation("EndHub");

                    b.Navigation("StartHub");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.Hub", b =>
                {
                    b.OwnsOne("QuadLogic.Core.Models.Point", "Location", b1 =>
                        {
                            b1.Property<string>("HubId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("HubId");

                            b1.ToTable("Hubs");

                            b1.WithOwner()
                                .HasForeignKey("HubId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("QuadLogic.Core.Models.MaintenanceRecord", b =>
                {
                    b.HasOne("QuadLogic.Core.Models.DroneBase", "Drone")
                        .WithMany()
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drone");
                });

            modelBuilder.Entity("QuadLogic.Core.Models.Drone", b =>
                {
                    b.OwnsOne("QuadLogic.Core.Models.Point", "CurrentLocation", b1 =>
                        {
                            b1.Property<string>("DroneId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("float");

                            b1.Property<double>("Longitude")
                                .HasColumnType("float");

                            b1.HasKey("DroneId");

                            b1.ToTable("Drones");

                            b1.WithOwner()
                                .HasForeignKey("DroneId");
                        });

                    b.Navigation("CurrentLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("QuadLogic.Core.Models.HeavyHexacopter", b =>
                {
                    b.HasOne("QuadLogic.Core.Models.DroneBase", null)
                        .WithOne()
                        .HasForeignKey("QuadLogic.Core.Models.HeavyHexacopter", "DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuadLogic.Core.Models.RapidQuadcopter", b =>
                {
                    b.HasOne("QuadLogic.Core.Models.DroneBase", null)
                        .WithOne()
                        .HasForeignKey("QuadLogic.Core.Models.RapidQuadcopter", "DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuadLogic.Core.Models.StandardQuadcopter", b =>
                {
                    b.HasOne("QuadLogic.Core.Models.DroneBase", null)
                        .WithOne()
                        .HasForeignKey("QuadLogic.Core.Models.StandardQuadcopter", "DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
